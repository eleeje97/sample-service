def label = "bootcamp-${UUID.randomUUID().toString()}"

/* -------- functions ---------- */
def notifySlack(STATUS, COLOR) {
	slackSend (channel: '#bootcamp', color: COLOR, message: STATUS+" : " +  "${env.JOB_NAME} [${env.BUILD_NUMBER}] (${env.BUILD_URL})")
}


/* ------------------------------ */


notifySlack("STARTED", "#FFFF00")


podTemplate(containers: [
    containerTemplate(name: 'maven', image: 'maven:3.8.1-jdk-8', command: 'sleep', args: '99d'),
	containerTemplate(name: "docker", image: "docker:latest", ttyEnabled: true, command: "cat"),
	containerTemplate(name: "kubectl", image: "lachlanevenson/k8s-kubectl", command: "cat", ttyEnabled: true),
	containerTemplate(name: "scanner", image: "newtmitch/sonar-scanner", ttyEnabled: true, command: "cat"),
	containerTemplate(name: 'podman', image: 'ibmcase/podman:ubuntu-16.04', ttyEnabled: true, command: 'cat', privileged: true)    
  ],
  	//volume mount
  volumes: [
		nfsVolume(mountPath: "/root/.m2", serverAddress: '169.56.100.99', serverPath: '/data/srv/nfs/.m2', readOnly: false)
	]
  ) {
    node(POD_LABEL) {
        stage('Get a Maven project') {
            git url: 'https://gitlab.com/nexweb/sample-service.git', branch: 'msa'
        }
        
		//-- 환경변수 파일 읽어서 변수값 셋팅
		String stageName = ""

		

		// Docker Hub Info.
		def tag = "0.1.2"
		def dockerRegistry = "https://index.docker.io/v1/"
		def credentialRegistry="nexweb1"
		def image = "nexweb1/sample"

		// Base Directory
		def baseDir = "./"
		def baseDeployDir = "./"

		// Kubernetes
		def deployment = "deployment/sample.yaml"
		def config = "deployment/config.yaml"
		def service ="deployment/service.yaml"
		def ingress = "deployment/ingress.yaml"
		def selector_key = "app"
		def selector_val = "sample"
		def namespace = "user00"
		
		try {

       		stageName = "Build maven project"

			// Build Source from Repository in gitlab
			stage(stageName) {
				echo "**** START : " + stageName
				def _dir = pwd();
				echo "path : ${_dir}"
				echo "baseDir : ${baseDir}"
				echo "baseDeployDir : ${baseDeployDir}"
				sh "ls -al"
				container('maven') {
						sh "mvn -B -f ${baseDir} clean package -Dmaven.testSkips=true "
						echo "*** RESULT ***"
						sh "pwd"
						sh "ls -al ${baseDir}/target"
				}
			}
			
			// Build Docker, Push Image to Docker Hub Repository.
			stage("Build Microservice image") {
				container("podman") {
					withCredentials([usernamePassword(
					                   credentialsId: "${credentialRegistry}",
					                   usernameVariable: 'USER',
					                   passwordVariable: 'PASSWORD'
					               )]) {
					  //sh 'echo user "$USER" pasword "$PASSWORD"'
					  sh "podman login --tls-verify=false --username ${USER} --password ${PASSWORD} ${dockerRegistry}"
						sh "podman build -f ./deployment/Dockerfile -t ${image}:${tag} ."
						sh "podman push ${image}:${tag}"
						sh "podman tag ${image}:${tag} ${image}:dev"
						sh "podman push ${image}:dev"

					}
				}
			}
			
			// Delete Deployment from Cluster in Kubernetes
			stage( "Clean Up Existing Deployments" ) {
				container("kubectl") {
					sh "kubectl delete deployments -n ${namespace} --selector=${selector_key}=${selector_val}"
				}
			}

			// Deploy App to Cluster in Kubernetes
			stage( "Deploy to Cluster" ) {
				container("kubectl") {
					sh "kubectl apply -n ${namespace} -f ${config}"
					sh "kubectl apply -n ${namespace} -f ${deployment}"
					sh "sleep 5"
					sh "kubectl apply -n ${namespace} -f ${service}"
					sh "kubectl apply -n ${namespace} -f ${ingress}"
				}
			}
            echo "**** FINISH ALL STAGES : SUCCESS"
            echo "**** notifySlack"	
            notifySlack("${currentBuild.currentResult}", "#00FF00")
		} catch(e) {
			currentBuild.result = "FAILED"
			//notifySlack("${currentBuild.currentResult}", "#FF0000")
			//notifyMail("${currentBuild.currentResult}", "${email_recipients}")
		}	
    }
}
